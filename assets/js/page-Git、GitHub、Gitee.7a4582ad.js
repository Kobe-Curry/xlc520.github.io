(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{542:function(i,v,e){"use strict";e.r(v);var t=e(1),_=Object(t.a)({},(function(){var i=this,v=i.$createElement,e=i._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[e("h1",{attrs:{id:"git、github、gitee"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git、github、gitee"}},[i._v("#")]),i._v(" Git、GitHub、Gitee")]),i._v(" "),e("h2",{attrs:{id:"一-git介绍与mac下如何生成ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-git介绍与mac下如何生成ssh-key"}},[i._v("#")]),i._v(" 一：Git介绍与Mac下如何生成ssh key")]),i._v(" "),e("p",[i._v("git是分布式的代码管理工具，远程的代码管理是基于ssh的，所以要使用远程的git则需要ssh的配置。简单的说，Git - 版本控制工具；Github是一个网站，提供给用户空间创建git仓储，保存用户的一些数据文档或者代码等；GitLab是基于Git的项目管理软件")]),i._v(" "),e("p",[i._v("​       首先，使用代码管理工具把本地的代码上传到服务器时需要加密处理，加密传输的算法有很多种，git可使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密。这两个数字就是你在使用git和github，gitlab的时候所遇到的public key也就是公钥以及private key私钥。")]),i._v(" "),e("p",[i._v("​       其中，公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原。如果你的key丢失了，不管是公钥还是私钥，丢失一个都不能用了，解决方法也很简单，删除原有的key，重新再生成一次，然后在github.com里再设置一次就行")]),i._v(" "),e("p",[i._v("在个人电脑生成ssh密钥后，会同时生成一个公开密钥和一个私有密钥，默认情况下在用户主目录下的.ssh目录中，密钥为id_rsa，公开密钥为id_rsa.pub。")]),i._v(" "),e("p",[i._v("密钥和公开密钥是共同使用的，协同开发中，一般会将公钥配置在服务器中，这样方便经常登录，也不需要输入密码，这是现在集群和各种云平台常用的登录方式，密钥在本地不被泄漏就非常安全。")]),i._v(" "),e("ul",[e("li",[i._v("步骤1.检查是否已经存在SSH Key")])]),i._v(" "),e("p",[i._v("打开电脑终端，输入以下命令：")]),i._v(" "),e("p",[i._v("ls -al ~/.ssh")]),i._v(" "),e("p",[i._v("会出现两种情况 ，如步骤2所示")]),i._v(" "),e("ul",[e("li",[i._v("步骤2. 生成/设置SSH Key")])]),i._v(" "),e("p",[i._v("继续上一步可能出现的情况")]),i._v(" "),e("p",[i._v("（1）情况一：终端出现文件id_rsa.pub 或 id_dsa.pub，则表示该电脑已经存在SSH Key，此时可继续输入命令：")]),i._v(" "),e("p",[i._v("pbcopy < ~/.ssh/id_rsa.pub")]),i._v(" "),e("p",[i._v("这样你需要的SSH Key 就已经复制到粘贴板上了，然后进行步骤3")]),i._v(" "),e("p",[i._v("（2）情况二：终端未出现id_rsa.pub 或 id_dsa.pub文件，表示该电脑还没有配置SSH Key，此时需要输入命令：")]),i._v(" "),e("p",[i._v('ssh-keygen -t rsa -C "your_email@example.com"')]),i._v(" "),e("p",[i._v("默认会在相应路径下（/your_home_path）生成id_rsa和id_rsa.pub两个文件，此时终端会显示：")]),i._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/1549588/1644164187476-6676ff38-2c76-44cb-a75e-93295b945a75.png",alt:"img",loading:"lazy"}})]),i._v(" "),e("p",[i._v("连续回车即可，也可能会让你输入密码，密码就是你的开机密码")]),i._v(" "),e("p",[i._v("此时再输入命令：ls -al ~/.ssh    就会出现id_rsa.pub 和 id_dsa.pub两个文件，然后重复情况一的步骤即输入以下命令再进行步骤3即可：")]),i._v(" "),e("p",[i._v("pbcopy < ~/.ssh/id_rsa.pub")]),i._v(" "),e("ul",[e("li",[i._v("步骤3.将SSH Key添加到Github和Gitee中")])]),i._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/1549588/1644163954973-29d7b898-0036-4f48-b13b-b771f3b3064b.png",alt:"img",loading:"lazy"}})]),i._v(" "),e("p",[i._v("*"),e("strong",[i._v("图：Github*")])]),i._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/1549588/1644164425045-94537f86-65d3-4a34-8554-08bcd00020f6.png",alt:"img",loading:"lazy"}})]),i._v(" "),e("p",[i._v("*"),e("strong",[i._v("图：Gitee*")]),i._v("[")]),i._v(" "),e("p",[i._v("](https://blog.csdn.net/wsdxsyb/article/details/81904472)")]),i._v(" "),e("h2",{attrs:{id:"二-常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-常用命令"}},[i._v("#")]),i._v(" 二：常用命令")]),i._v(" "),e("ol",[e("li",[e("p",[i._v("拉取代码 git clone xxx.git")])]),i._v(" "),e("li",[e("p",[i._v("创建分支 git branch dev 或者 git checkout -b dev 或者 git switch -c dev")])]),i._v(" "),e("li",[e("p",[i._v("切换本地分支 git checkout dev 或者 git switch dev")])]),i._v(" "),e("li",[e("p",[i._v("切换分支并关联远程分支 git checkout -b dev origin/dev 或者 git checkout --track origin/dev")])]),i._v(" "),e("li",[e("p",[i._v("查看本地所有分支 git branch、查看远程所有分支 git branch -r")])]),i._v(" "),e("li",[e("p",[i._v("删除本地分支 git branch -d dev、删除远程分支 git push origin -d dev")])]),i._v(" "),e("li",[e("p",[i._v("将代码从工作区添加暂存区 git add .")])]),i._v(" "),e("li",[e("p",[i._v("查看尚未暂存的更新 git diff")])]),i._v(" "),e("li",[e("p",[i._v("添加提交信息 git commit -m 'xxxx'（commit注释写错，执行 git commit --amend")])])]),i._v(" "),e("p",[i._v("此时会进入默认vim编辑器，修改注释完毕后保存）")]),i._v(" "),e("ol",[e("li",[e("p",[i._v("推送代码到远程分支 git push origin dev、强制推送git push -f origin dev（常在git rebase后使用）")])]),i._v(" "),e("li",[e("p",[i._v("拉取远程分支代码 git pull origin dev")])]),i._v(" "),e("li",[e("p",[i._v("合并分支 git merge dev")])]),i._v(" "),e("li",[e("p",[i._v("查看git状态 git status")])]),i._v(" "),e("li",[e("p",[i._v("查看提交历史 git log")])]),i._v(" "),e("li",[e("p",[i._v("查看命令历史 git reflog")])]),i._v(" "),e("li",[e("p",[i._v("把本地未push的分叉提交历史整理成直线 git rebase origin/dev、回到rebase执行之前的状态 git rebase --abort")])]),i._v(" "),e("li",[e("p",[i._v("回退版本 git reset --hard commit_id、回退上一个版本 git reset --soft HEAD^ 等于 git reset --soft HEAD~1")])]),i._v(" "),e("li",[e("p",[i._v("修改分支名 git branch -m oldBranchName newBranchName、git push origin :oldBranchName、git push --set-upstream origin newBranchName")])]),i._v(" "),e("li",[e("p",[i._v("查看git配置 git config --global --list、git config --global user.name")])]),i._v(" "),e("li",[e("p",[i._v("git config  --global --add user.name newName（增）")])]),i._v(" "),e("li",[e("p",[i._v("git config  --global --unset user.name（删）")])]),i._v(" "),e("li",[e("p",[i._v("git config --global user.name newName（改）")])]),i._v(" "),e("li",[e("p",[i._v("配置Git用户名和邮箱")])])]),i._v(" "),e("p",[i._v('git config --global user.name "Your Name"')]),i._v(" "),e("p",[i._v('git config --global user.email "email@example.com"')]),i._v(" "),e("h2",{attrs:{id:"三-提交规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-提交规范"}},[i._v("#")]),i._v(" 三：提交规范")]),i._v(" "),e("p",[i._v("https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular")]),i._v(" "),e("ul",[e("li",[e("p",[i._v("feat 增加新功能")])]),i._v(" "),e("li",[e("p",[i._v("fix 修复问题/BUG")])]),i._v(" "),e("li",[e("p",[i._v("style 代码风格相关无影响运行结果的")])]),i._v(" "),e("li",[e("p",[i._v("perf 优化/性能提升")])]),i._v(" "),e("li",[e("p",[i._v("refactor 重构")])]),i._v(" "),e("li",[e("p",[i._v("revert 撤销修改")])]),i._v(" "),e("li",[e("p",[i._v("test 测试相关")])]),i._v(" "),e("li",[e("p",[i._v("docs 文档/注释")])]),i._v(" "),e("li",[e("p",[i._v("chore 依赖更新/脚手架配置修改等")])]),i._v(" "),e("li",[e("p",[i._v("workflow 工作流改进")])]),i._v(" "),e("li",[e("p",[i._v("ci 持续集成")])]),i._v(" "),e("li",[e("p",[i._v("types 类型定义文件更改")])]),i._v(" "),e("li",[e("p",[i._v("wip 开发中")])])]),i._v(" "),e("h2",{attrs:{id:"四-codereview常用缩写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-codereview常用缩写"}},[i._v("#")]),i._v(" 四：CodeReview常用缩写")]),i._v(" "),e("p",[i._v("PR: Pull Request. 拉取请求，给其他项目提交代码")]),i._v(" "),e("p",[i._v("LGTM: Looks Good To Me. 朕知道了 代码已经过 review，可以合并")]),i._v(" "),e("p",[i._v("SGTM: Sounds Good To Me. 和上面那句意思差不多，也是已经通过了 review 的意思")]),i._v(" "),e("p",[i._v("WIP: Work In Progress. 传说中提 PR 的最佳实践是，如果你有个改动很大的 PR，可以在写了一部分的情况下先提交，但是在标题里写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码。")]),i._v(" "),e("p",[i._v("PTAL: Please Take A Look. 你来瞅瞅？用来提示别人来看一下")]),i._v(" "),e("p",[i._v("TBR: To Be Reviewed. 提示维护者进行 review")]),i._v(" "),e("p",[i._v("TL;DR: Too Long; Didn't Read. 太长懒得看。也有很多文档在做简略描述之前会写这么一句")]),i._v(" "),e("p",[i._v("TBD: To Be Done(or Defined/Discussed/Decided/Determined). 根据语境不同意义有所区别，但一般都是还没搞定的意思")]),i._v(" "),e("p",[i._v("注意：dev代表分支名（可随便命名）")])])}),[],!1,null,null,null);v.default=_.exports}}]);